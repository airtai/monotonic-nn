[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mono-dense-keras"
description = "Monotonic Neural Networks"
readme = "README.md"
authors = [
    { name = "AIRT Technologies", email = "info@airt.ai" },
]

keywords = ["tensorflow", "keras", "monotone", "monotonic neural networks", "dense layer"]

requires-python = ">=3.9"

classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Framework :: Pydantic",
    "Framework :: Pydantic :: 2",
]

dynamic = ["version"]

dependencies = ["tensorflow>=2.10.0,<2.16"]

[project.optional-dependencies]
# public distributions

# dev dependencies
devdocs = [
    "mkdocs==1.6.1",
    "mkdocs-autorefs==1.2.0",  # mkdocs build fails if upgraded
    "mkdocs-material==9.5.48",
    "mkdocs-static-i18n==1.2.3",
    "mdx-include==1.4.2",
    "mkdocstrings[python]==0.27.0",
    "mkdocs-literate-nav==0.6.1",
    "mkdocs-git-revision-date-localized-plugin==1.3.0",
    "mike==2.1.3",  # versioning
    "mkdocs-minify-plugin==0.8.0",
    "mkdocs-macros-plugin==1.3.7",  # includes with variables
    "mkdocs-glightbox==0.4.0",  # img zoom
    "pillow==10.4.0,<11",  # ToDo: together 1.12 needs pillow <11
    "cairosvg==2.7.1",
    "cookiecutter==2.6.0",
    "griffe",
]

lint = [
    "types-PyYAML",
    "types-setuptools",
    "types-ujson",
    "types-Pygments",
    "types-docutils",
    "mypy==1.15.0",
    "ruff==0.11.0",
#    "pyupgrade-directories==0.3.0",
    "bandit==1.8.3",
    "semgrep==1.112.0",
    "codespell==2.4.1",
    "pytest-mypy-plugins==3.2.0",
]

test-core = [
    "coverage[toml]==7.7.0",
    "pytest==8.3.5",
    "pytest-asyncio==0.25.3",
    "dirty-equals==0.9.0",
    "pytest-rerunfailures==15.0",
    "jsondiff==2.2.1",
]

testing = [
    "pydantic-settings==2.8.1",
    "PyYAML==6.0.2",
    "watchfiles==1.0.4",
    "email-validator==2.2.0",
    "python-multipart>=0.0.20",
    "PyJWT==2.10.0",
    "passlib[bcrypt]==1.7.4",
]

dev = [
    "pre-commit==4.1.0",
    "detect-secrets==1.5.0",
]

[project.urls]
Homepage = "https://github.com/airtai/monotonic-nn"
Documentation = "https://monotonic.airt.ai/latest/"
Tracker = "https://github.com/airtai/monotonic-nn/issues"
Source = "https://github.com/airtai/monotonic-nn"

[project.scripts]

[tool.hatch.version]
path = "airt/__about__.py"

[tool.hatch.build]
skip-excluded-dirs = true
exclude = [
    "/tests",
    "/docs",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
only-include = ["airt"]

[tool.hatch.build.targets.wheel.sources]
# "src" = ""
# "scripts" = "airt/scripts"

[tool.mypy]

files = ["airt", "tests"]

strict = true
python_version = "3.9"
ignore_missing_imports = true
install_types = true
non_interactive = true
plugins = [
    "pydantic.mypy",
]

# from https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
disallow_untyped_defs = true
no_implicit_optional = true
check_untyped_defs = true
warn_return_any = true
show_error_codes = true
warn_unused_ignores = false

disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_unimported = false

[tool.ruff]
fix = true
line-length = 88
# target-version = 'py39'
include = ["airt/**/*.py", "airt/**/*.pyi", "airt/**/*.py", "nbs/**/*.ipynb", "pyproject.toml"]
exclude = []

[tool.ruff.lint]
select = [
    "E",     # pycodestyle errors     https://docs.astral.sh/ruff/rules/#error-e
    "W",     # pycodestyle warnings   https://docs.astral.sh/ruff/rules/#warning-w
    "C90",   # mccabe                 https://docs.astral.sh/ruff/rules/#mccabe-c90
    "N",     # pep8-naming            https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "D",     # pydocstyle             https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "I",     # isort                  https://docs.astral.sh/ruff/rules/#isort-i
    "F",     # pyflakes               https://docs.astral.sh/ruff/rules/#pyflakes-f
    "ASYNC", # flake8-async           https://docs.astral.sh/ruff/rules/#flake8-async-async
    "C4",    # flake8-comprehensions  https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "B",     # flake8-bugbear         https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "Q",     # flake8-quotes          https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "T20",   # flake8-print           https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "SIM",   # flake8-simplify        https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "PT",    # flake8-pytest-style    https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "PTH",   # flake8-use-pathlib     https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "TCH",   # flake8-type-checking   https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "RUF",   # Ruff-specific rules    https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "PERF",  # Perflint               https://docs.astral.sh/ruff/rules/#perflint-perf
]

ignore = [
    "E501",  # line too long, handled by formatter later
    "D100", "D101", "D102", "D103", "D104",
#     "C901",  # too complex
]

[tool.ruff.lint.isort]
case-sensitive = true

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-bugbear]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-q -m 'not slow'"
testpaths = [
    "tests",
]
markers = []

# Add filterwarnings to suppress the specific UserWarning
filterwarnings = "ignore:.*custom validator is returning a value other than `self`.*:UserWarning"

[tool.coverage.run]
parallel = true
branch = true
concurrency = [
    "multiprocessing",
    "thread"
]
source = [
    "airt",
#    "tests",
]
context = '${CONTEXT}'
omit = [
    "**/__init__.py",
]

[tool.coverage.report]
show_missing = true
skip_empty = true
sort = "miss"

exclude_also = [
    "if __name__ == .__main__.:",
    "self.logger",
    "def __repr__",
    "lambda: None",
    "from .*",
    "import .*",
    '@(abc\.)?abstractmethod',
    "raise NotImplementedError",
    'raise AssertionError',
    'logger\..*',
    "pass",
    '\.\.\.',
]
omit = [
    '*/__about__.py',
    '*/__main__.py',
    '*/__init__.py',
]

[tool.bandit]

[tool.black]

line-length = 88

extend-exclude = """
/(
    docs/docs_src
    | some_other_dir
)/
"""

[tool.codespell]
skip = "./venv*,./docs/site/*,./htmlcov,./examples/openapi/whatsapp_openapi_complete.json"
ignore-words = ".codespell-whitelist.txt"
